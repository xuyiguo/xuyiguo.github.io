<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java io 系统</title>
    <url>/2020/03/21/Java-io-%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><p>File类这个名字有一定误导性，实际上它既能代表一个特定文件，又能代表一个目录下的一组文件</p>
<p>如果它指的是一个文件集，我们就可以对此集合调用list()方法，这个方法会返回一个字符数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FilenameFilter;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File path = <span class="keyword">new</span> File(<span class="string">"."</span>);</span><br><span class="line">        String[] list;</span><br><span class="line">        <span class="keyword">if</span> (args.length == <span class="number">0</span>) &#123;</span><br><span class="line">            list = path.list();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            list = path.list(<span class="keyword">new</span> FilenameFilter() &#123;</span><br><span class="line">                <span class="keyword">private</span> Pattern pattern = Pattern.compile(args[<span class="number">0</span>]);</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File dir, String name)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> pattern.matcher(name).matches();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Arrays.sort(list, String.CASE_INSENSITIVE_ORDER);</span><br><span class="line">        <span class="keyword">for</span> (String dirItem : list) &#123;</span><br><span class="line">            System.out.println(dirItem);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>FilenameFilter 提供了accept回调方法，使得我们在调用list()方法的时候可以根据正则去筛选我们想要的文件列表。</p>
<p>一个文件查找工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FilenameFilter;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Directory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> File[] local(File dir, <span class="keyword">final</span> String regex) &#123;</span><br><span class="line">        <span class="keyword">return</span> dir.listFiles(<span class="keyword">new</span> FilenameFilter() &#123;</span><br><span class="line">            Pattern pattern = Pattern.compile(regex);</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File dir, String name)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> pattern.matcher(name).matches();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> File[] local(String path, String regex) &#123;</span><br><span class="line">        <span class="keyword">return</span> local(<span class="keyword">new</span> File(path), regex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeInfo</span> <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">File</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> List&lt;File&gt; files = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//文件列表</span></span><br><span class="line">        <span class="keyword">public</span> List&lt;File&gt; dirs = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//路径列表</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Iterator&lt;File&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> files.iterator();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">addAll</span><span class="params">(TreeInfo other)</span> </span>&#123;</span><br><span class="line">            files.addAll(other.files);</span><br><span class="line">            dirs.addAll(other.dirs);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"TreeInfo&#123;"</span> +</span><br><span class="line">                    <span class="string">"files="</span> + files +</span><br><span class="line">                    <span class="string">", dirs="</span> + dirs +</span><br><span class="line">                    <span class="string">'&#125;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeInfo <span class="title">walk</span><span class="params">(String start, String regex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> recurseDirs(<span class="keyword">new</span> File(start), regex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeInfo <span class="title">walk</span><span class="params">(String start)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> recurseDirs(<span class="keyword">new</span> File(start), <span class="string">".*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *递归查找文件</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> TreeInfo <span class="title">recurseDirs</span><span class="params">(File startDir, String regex)</span> </span>&#123;</span><br><span class="line">        TreeInfo result = <span class="keyword">new</span> TreeInfo();</span><br><span class="line">        <span class="keyword">for</span> (File item : startDir.listFiles()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (item.isDirectory()) &#123;</span><br><span class="line">                result.dirs.add(item);</span><br><span class="line">                result.addAll(recurseDirs(item, regex));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (item.getName().matches(regex))</span><br><span class="line">                    result.files.add(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (args.length == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(walk(<span class="string">"./basic"</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (String arg : args) &#123;</span><br><span class="line">                System.out.println(walk(arg));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>File类不仅仅只代表村则的文件或目录，也可以用File对象来创建新的目录或尚不存在的整个目录路径。<br>我们还可以查看文件的特性(如：大小，最后修改日期、读写)，检查某个File对象代表的是一个文件还是一个目录，并可以删除文件。<br>下面的示例展示了File类的一些其他方法</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MakeDirectories</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">usage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"Usage:MakeDirectories path1 ...\n"</span> +</span><br><span class="line">                <span class="string">"Creates each path\n"</span> +</span><br><span class="line">                <span class="string">"Usage:MakeDirectories -d path1 ...\n"</span> +</span><br><span class="line">                <span class="string">"Deletes each path\n"</span> +</span><br><span class="line">                <span class="string">"Usage:MakeDirectories -r path1 path2\n"</span> +</span><br><span class="line">                <span class="string">"Renames from path1 to path2"</span></span><br><span class="line">        );</span><br><span class="line">        System.exit(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fileData</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        System.out.println(</span><br><span class="line">                <span class="string">"Absolute path: "</span> + file.getAbsolutePath() + <span class="string">"\n"</span> + <span class="comment">//绝对路径</span></span><br><span class="line">                        <span class="string">"Can read: "</span> + file.canRead() + <span class="string">"\n"</span> +<span class="comment">//是否可读</span></span><br><span class="line">                        <span class="string">"Can write: "</span> + file.canWrite() + <span class="string">"\n"</span> +<span class="comment">//是否可写</span></span><br><span class="line">                        <span class="string">"getName: "</span> + file.getName() + <span class="string">"\n"</span> +<span class="comment">//文件名</span></span><br><span class="line">                        <span class="string">"getParent: "</span> + file.getParent() + <span class="string">"\n"</span> +<span class="comment">//是根据你创建的File对象时输入的路径而解析出来的，如果没有指定的父目录，则返回空</span></span><br><span class="line">                        <span class="string">"getPath: "</span> + file.getPath() + <span class="string">"\n"</span> +<span class="comment">//构造file对象时传入的路径</span></span><br><span class="line">                        <span class="string">"length: "</span> + file.length() + <span class="string">"\n"</span> +<span class="comment">//文件大小</span></span><br><span class="line">                        <span class="string">"lastModified: "</span> + file.lastModified()<span class="comment">//文件最后修改日期</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"It's a file"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"It's a directory"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (args.length &lt; <span class="number">1</span>)    </span><br><span class="line">            usage();</span><br><span class="line">        <span class="keyword">if</span> (args[<span class="number">0</span>].equals(<span class="string">"-r"</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (args.length != <span class="number">3</span>) usage();</span><br><span class="line">            File old = <span class="keyword">new</span> File(args[<span class="number">1</span>]), rname = <span class="keyword">new</span> File(args[<span class="number">2</span>]);</span><br><span class="line">            old.renameTo(rname);</span><br><span class="line">            fileData(old);</span><br><span class="line">            fileData(rname);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> del = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (args[<span class="number">0</span>].equals(<span class="string">"-d"</span>)) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            del = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        count--;</span><br><span class="line">        <span class="keyword">while</span> (++count &lt; args.length) &#123;</span><br><span class="line">            File f = <span class="keyword">new</span> File(args[count]);</span><br><span class="line">            <span class="keyword">if</span> (f.exists()) &#123;</span><br><span class="line">                System.out.println(f + <span class="string">" exists"</span>);</span><br><span class="line">                <span class="keyword">if</span> (del) &#123;</span><br><span class="line">                    f.mkdirs();</span><br><span class="line">                    System.out.println(<span class="string">"created "</span> + f);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!del) &#123;</span><br><span class="line">                    f.mkdirs();</span><br><span class="line">                    System.out.println(<span class="string">"created "</span> + f);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            fileData(f);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h2><h3 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h3><p> InputStream的作用来表示那些从不同数据源产生输入的类。包括：</p>
<ol>
<li><p>字节数组</p>
</li>
<li><p>String对象</p>
</li>
<li><p>文件</p>
</li>
<li><p>“管道(channel)”</p>
</li>
<li><p>一个由其他种类的流组成的序列</p>
</li>
<li><p>其他数据源，如internet连接</p>
<p><strong>InputStream类型</strong></p>
<table>
<thead>
<tr>
<th align="center">类</th>
<th align="center">功能</th>
<th align="center">构造器参数/如何使用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ByteArrayInputStream</td>
<td align="center">允许将内存的缓冲区当作InputStream使用</td>
<td align="center">缓冲区，字节将从中取出/作为一种数据源</td>
</tr>
<tr>
<td align="center">StreamBufferInputStream</td>
<td align="center">将String转化成InputStream</td>
<td align="center">字符串。底层使用StringBuffer/作为一种数据源</td>
</tr>
<tr>
<td align="center">FileInputStream</td>
<td align="center">用于从文件中读取信息</td>
<td align="center">字符串、表示文件名、文件或者FileDescription对象/作为一种数据源</td>
</tr>
<tr>
<td align="center">PipedInputStream</td>
<td align="center">产生用于写入如相关PipedOutputStream的数据。实现管道化的概念</td>
<td align="center">PipedOutPutStream/作为多线程中数据源</td>
</tr>
<tr>
<td align="center">SequenceInputStream</td>
<td align="center">将两个或多个InputStream转换成单一InputStream</td>
<td align="center">两个InputStream对象或一个容纳InputStream的容器Enumeration</td>
</tr>
<tr>
<td align="center">FilterInputStream</td>
<td align="center">抽象类，作为“装饰器”的接口。其中，“装饰器“</td>
<td align="center"></td>
</tr>
</tbody></table>
<p>​<strong>OutputStream类型</strong></p>
<table>
<thead>
<tr>
<th align="center">类</th>
<th align="center">功能</th>
<th align="center">构造器参数/如何使用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ByteArrayOutputStream</td>
<td align="center">在内存中创建缓冲区。所有送往“流”的数据都要放置在此缓冲区</td>
<td align="center">缓冲区初始化尺寸/用于指定数据的目的地</td>
</tr>
<tr>
<td align="center">FileOutputStream</td>
<td align="center">用于将信息写入文件</td>
<td align="center">字符串，表示文件名、文件或FileDescription对象 /指定数据的目的地</td>
</tr>
<tr>
<td align="center">PipedOutpustStream</td>
<td align="center">任何写入其中的信息都会自动作为相关PipedInputStream的输出。实现“管道化”概念</td>
<td align="center">PipedInputStream指定用于多线程的数据的目的地</td>
</tr>
<tr>
<td align="center">FilterInputstream</td>
<td align="center">抽象类，作为“装饰器“的接口。其中，”装饰器“为其他OutputStream提供有用功能</td>
<td align="center"></td>
</tr>
</tbody></table>
<p> <strong>FilterInputStream类型</strong></p>
<table>
<thead>
<tr>
<th align="center">类</th>
<th align="center">功能</th>
<th align="center">构造器参数/使用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">DataInputStream</td>
<td align="center">与DataOutputStream搭配使用，可以从流中读取基本数据类型(int,char,long)</td>
<td align="center">InputStream/包含用于读取基本类型数据的全部接口</td>
</tr>
<tr>
<td align="center">BufferedBufferedInputStream（已弃用）</td>
<td align="center">使用缓冲区</td>
<td align="center">InputStream，可以指定缓冲区大小/本质上不提供接口，只不过是像进程中添加缓冲区所必须的。与接口对象搭配使用</td>
</tr>
<tr>
<td align="center">LineNumberInputStream（已弃用）</td>
<td align="center">跟踪输入流中的行号；可调用getLineNumber()和setLineNumber()</td>
<td align="center">InputStream/仅增加了行号，因此可能要与接口对象搭配使用</td>
</tr>
<tr>
<td align="center">PushbackInputStream</td>
<td align="center">具有”能弹出一个字节的”缓冲区“。因此可以将读到最后一个字符回退</td>
<td align="center">InputStream/通常作为编译器的扫描器，我们可能永远也不会用到</td>
</tr>
</tbody></table>
<p><strong>FilterOutputStream类型</strong></p>
<table>
<thead>
<tr>
<th align="center">类</th>
<th align="center">功能</th>
<th align="center">构造器/使用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">DataOutputStream</td>
<td align="center">与DataOutputStream搭配使用，向流中写入基本类型数据(int,char,long)</td>
<td align="center">OutputStream/包含用于写入基本类型数据的全部接口</td>
</tr>
<tr>
<td align="center">PrintStream</td>
<td align="center">用于产生格式化输出。其中DataOutStream处理数据的存储，PrintStream处理显示</td>
<td align="center">OutputStream/可以用boolean值指示是否在每次换行时清空缓冲区应该是对OutputStream对象的“final”封装。可能会经常使用到它</td>
</tr>
<tr>
<td align="center">BufferedOutputStream</td>
<td align="center">使用它以避免每次发送数据时都要进行实际的写操作。代表“使用缓冲区”。可以调用flush()清空缓冲区</td>
<td align="center">OutputStream/可以指定缓冲区大小，本质上并不提供接口，只不过是向进程中添加缓冲区所必需的。与接口对象搭配</td>
</tr>
</tbody></table>
<p><strong>Reader和writer</strong><br>与InputStream和OutputStream面向字节操作不同，Reader和Writer提供了兼容Unicode和面向字符IO功能</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>java中的正则表达式</title>
    <url>/2020/03/07/java%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><ol>
<li>常用正则含义</li>
</ol>
<table>
<thead>
<tr>
<th align="center">字符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">B</td>
<td align="center">指定字符B</td>
</tr>
<tr>
<td align="center">\xhh</td>
<td align="center">十六进制值为oxhh的字符</td>
</tr>
<tr>
<td align="center">\t</td>
<td align="center">制表符Tab</td>
</tr>
<tr>
<td align="center">\n</td>
<td align="center">换行符</td>
</tr>
<tr>
<td align="center">\r</td>
<td align="center">回车</td>
</tr>
<tr>
<td align="center">\f</td>
<td align="center">换页</td>
</tr>
<tr>
<td align="center">\e</td>
<td align="center">转义（Escape）</td>
</tr>
<tr>
<td align="center">.</td>
<td align="center">任意字符</td>
</tr>
<tr>
<td align="center">[abc]</td>
<td align="center">包含a、b和c的任何字符(和a|b|c作用相同)</td>
</tr>
<tr>
<td align="center">[^abc]</td>
<td align="center">除了a、b和c以外的任何字符(否定)</td>
</tr>
<tr>
<td align="center">[a-zA-Z]</td>
<td align="center">从a到z或从A到Z的任何字符(范围)</td>
</tr>
<tr>
<td align="center">[abc[hij]]</td>
<td align="center">任意a、b、c、h、i和j字符(与a|b|c|h|i|j作用相同)(并集)</td>
</tr>
<tr>
<td align="center">[a-z&amp;&amp;[hij]]</td>
<td align="center">任意h、j或i(交集)</td>
</tr>
<tr>
<td align="center">\s</td>
<td align="center">空白符(空格、tab、换行、换页和回车)</td>
</tr>
<tr>
<td align="center">\S</td>
<td align="center">非空白符</td>
</tr>
<tr>
<td align="center">\d</td>
<td align="center">数字</td>
</tr>
<tr>
<td align="center">\D</td>
<td align="center">非数字</td>
</tr>
<tr>
<td align="center">\w</td>
<td align="center">词字符 [a-zA-Z0-9]</td>
</tr>
<tr>
<td align="center">\W</td>
<td align="center">非词字符</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">字符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">*</td>
<td align="center">匹配前一个字符出现0次或者无限次，即可有可无</td>
</tr>
<tr>
<td align="center">+</td>
<td align="center">匹配前一个字符出现1次或者无限次，即至少有一次</td>
</tr>
<tr>
<td align="center">？</td>
<td align="center">匹配前一个字符出现1次或者0次，即要么有1次，要么没有</td>
</tr>
<tr>
<td align="center">{m}</td>
<td align="center">匹配前一个字符出现m次</td>
</tr>
<tr>
<td align="center">{m,}</td>
<td align="center">匹配前一个字符至少出现m次</td>
</tr>
<tr>
<td align="center">{m,n}</td>
<td align="center">匹配前一个字符出现从m到n次</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">逻辑操作符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">XY</td>
<td align="center">Y跟在X后面</td>
</tr>
<tr>
<td align="center">X|Y</td>
<td align="center">X或Y</td>
</tr>
<tr>
<td align="center">(X)</td>
<td align="center">组</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">边界匹配符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">^</td>
<td align="center">一行的开始</td>
</tr>
<tr>
<td align="center">$</td>
<td align="center">一行的结束</td>
</tr>
<tr>
<td align="center">\b</td>
<td align="center">词的边界</td>
</tr>
<tr>
<td align="center">\B</td>
<td align="center">非词的边界</td>
</tr>
<tr>
<td align="center">\G</td>
<td align="center">前一个匹配的结束</td>
</tr>
</tbody></table>
<ol start="2">
<li><p>java中的Pattern类</p>
<p>Pattern对象表示编译后的正则表达式，其中matcher()方法可以接收一串字符串，从而构建出一个Mathcher对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">     String regex = <span class="string">"(abc)&#123;2,&#125;"</span>;</span><br><span class="line">        String param = <span class="string">"abcabcabd"</span>;</span><br><span class="line">        Pattern pattern = Pattern.compile(regex);</span><br><span class="line">        Matcher matcher = pattern.matcher(param);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Match \""</span> + matcher.group() + <span class="string">"\" at positions "</span> + matcher.start() + <span class="string">"-"</span> + (matcher.end() - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Pattern 类还提供了static方法</p>
<p><code>static boolean matches(String regex,CharSequence input)</code></p>
<p>该方法用于检查regex是否匹配了整个CharSequence 类型的input参数</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/02/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>article title</title>
    <url>/2020/03/01/article-title/</url>
    <content><![CDATA[<h1 id="这只是一个栗子"><a href="#这只是一个栗子" class="headerlink" title="这只是一个栗子"></a>这只是一个栗子</h1>]]></content>
      <tags>
        <tag>练习</tag>
      </tags>
  </entry>
</search>
